{
  "address": "0x6941FDF2eAAd6c0De94CA6B004eBc38fFF0458f3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bettor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "prediction",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betTimestamp",
          "type": "uint256"
        }
      ],
      "name": "BetPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bettor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "win",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "BetResolved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLIP_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOSS_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BET_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIN_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "addSixtySeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betsByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "prediction",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "betTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "win",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxBetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bettor",
          "type": "address"
        }
      ],
      "name": "getNumberOfBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IETHOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_prediction",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_betTimestamp",
          "type": "uint256"
        }
      ],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_betIndex",
          "type": "uint256"
        }
      ],
      "name": "resolveBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa450c49349c481d3acb56b7a489a162e41a21dff30b991a4905c67379cecfd90",
  "receipt": {
    "to": null,
    "from": "0x9EFBF76717729978543c49a961B4a784Ce97F318",
    "contractAddress": "0x6941FDF2eAAd6c0De94CA6B004eBc38fFF0458f3",
    "transactionIndex": 70,
    "gasUsed": "913863",
    "logsBloom": "0x
    "blockHash": "0xaf66835fce2a78b1b7ec2d227bd551913ef778e5f1346fedc5015a513d8896de",
    "transactionHash": "0xa450c49349c481d3acb56b7a489a162e41a21dff30b991a4905c67379cecfd90",
    "logs": [],
    "blockNumber": 5950925,
    "cumulativeGasUsed": "12002320",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x77E1Bb33d34392b3C0dB5dFFDbADceED752aFC3b",
    2197
  ],
  "numDeployments": 16,
  "solcInputHash": "f26f8f1d64268dafcede5b418e276636",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"prediction\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betTimestamp\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"win\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"BetResolved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLIP_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOSS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BET_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIN_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addSixtySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"prediction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"betTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"win\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"}],\"name\":\"getNumberOfBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IETHOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_prediction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betTimestamp\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betIndex\",\"type\":\"uint256\"}],\"name\":\"resolveBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FlipTheCoin.sol\":\"FlipTheCoin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/FlipTheCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ninterface IETHOracle {\\n\\tfunction sendRequest(\\n\\t\\tbytes memory encryptedSecretsUrls,\\n\\t\\tuint8 donHostedSecretsSlotID,\\n\\t\\tuint64 donHostedSecretsVersion,\\n\\t\\tstring[] memory args,\\n\\t\\tbytes[] memory bytesArgs,\\n\\t\\tuint64 subscriptionId,\\n\\t\\tuint32 gasLimit,\\n\\t\\tbytes32 donID\\n\\t) external returns (bytes32 requestId);\\n\\n\\tfunction didPriceIncrease(\\n\\t\\tuint256 fromTimestamp,\\n\\t\\tuint256 toTimestamp\\n\\t) external view returns (bool priceIncreased, bool isSet);\\n}\\n\\ncontract FlipTheCoin {\\n\\tIETHOracle public oracle;\\n\\tuint64 public subscriptionId;\\n\\tbytes32 donID = \\\"fun-ethereum-sepolia-1\\\";\\n\\n\\tuint256 public constant FLIP_FEE_PERCENTAGE = 3;\\n\\tuint256 public constant MAX_BET_PERCENTAGE = 90;\\n\\tuint256 public constant WIN_MULTIPLIER = 150;\\n\\tuint256 public constant LOSS_MULTIPLIER = 50;\\n\\tuint256 public reserve = 0;\\n\\n\\tstruct Bet {\\n\\t\\tuint256 amount;\\n\\t\\tbool prediction;\\n\\t\\tuint256 betTimestamp;\\n\\t\\tbool resolved;\\n\\t\\tbool win;\\n\\t}\\n\\n\\tmapping(address => Bet[]) public betsByAddress;\\n\\n\\tevent BetPlaced(\\n\\t\\taddress indexed bettor,\\n\\t\\tuint256 indexed betIndex,\\n\\t\\tuint256 amount,\\n\\t\\tbool prediction,\\n\\t\\tuint256 betTimestamp\\n\\t);\\n\\n\\tevent BetResolved(\\n\\t\\taddress indexed bettor,\\n\\t\\tuint256 indexed betIndex,\\n\\t\\tbool win,\\n\\t\\tuint256 payout\\n\\t);\\n\\n\\tconstructor(address oracleAddress, uint64 _subscriptionId) payable {\\n\\t\\toracle = IETHOracle(oracleAddress);\\n\\t\\tsubscriptionId = _subscriptionId;\\n\\t\\treserve += msg.value;\\n\\t}\\n\\n\\tfunction getMaxBetAmount() public view returns (uint256) {\\n\\t\\treturn (reserve * MAX_BET_PERCENTAGE) / 100;\\n\\t}\\n\\n\\tfunction getNumberOfBets(address bettor) public view returns (uint) {\\n\\t\\treturn betsByAddress[bettor].length;\\n\\t}\\n\\n\\tfunction placeBet(\\n\\t\\tbool _prediction,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _betTimestamp\\n\\t) public payable {\\n\\t\\trequire(msg.value == _amount, \\\"Incorrect value sent\\\");\\n\\t\\trequire(\\n\\t\\t\\t_amount <= (reserve * MAX_BET_PERCENTAGE) / 100,\\n\\t\\t\\t\\\"Bet amount exceeds maximum allowed\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 fee = (_amount * FLIP_FEE_PERCENTAGE) / 100;\\n\\t\\tuint256 betAmount = _amount - fee;\\n\\t\\treserve += fee;\\n\\n\\t\\tbetsByAddress[msg.sender].push(\\n\\t\\t\\tBet(betAmount, _prediction, _betTimestamp, false, false)\\n\\t\\t);\\n\\n\\t\\tstring[] memory args = new string[](2);\\n\\t\\tbytes[] memory bytesArgs = new bytes[](0);\\n\\n\\t\\targs[0] = Strings.toString(_betTimestamp);\\n\\t\\tuint256 conclusionTimestamp = _betTimestamp + 60;\\n\\t\\targs[1] = Strings.toString(conclusionTimestamp);\\n\\n\\t\\toracle.sendRequest(\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t0,\\n\\t\\t\\t0,\\n\\t\\t\\targs,\\n\\t\\t\\tbytesArgs,\\n\\t\\t\\tsubscriptionId,\\n\\t\\t\\t300000,\\n\\t\\t\\tdonID\\n\\t\\t);\\n\\t\\temit BetPlaced(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tbetsByAddress[msg.sender].length - 1,\\n\\t\\t\\tbetAmount,\\n\\t\\t\\t_prediction,\\n\\t\\t\\t_betTimestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction resolveBet(uint256 _betIndex) public {\\n\\t\\trequire(\\n\\t\\t\\t_betIndex < betsByAddress[msg.sender].length,\\n\\t\\t\\t\\\"Bet index out of range\\\"\\n\\t\\t);\\n\\n\\t\\tBet storage bet = betsByAddress[msg.sender][_betIndex];\\n\\t\\trequire(!bet.resolved, \\\"Bet already resolved\\\");\\n\\n\\t\\t(bool priceIncreased, bool isSet) = oracle.didPriceIncrease(\\n\\t\\t\\tbet.betTimestamp,\\n\\t\\t\\tbet.betTimestamp + 60\\n\\t\\t);\\n\\n\\t\\trequire(isSet, \\\"Oracle response not yet set\\\");\\n\\n\\t\\tbool win = (priceIncreased == bet.prediction);\\n\\n\\t\\tuint256 payout = win\\n\\t\\t\\t? (bet.amount * WIN_MULTIPLIER) / 100\\n\\t\\t\\t: (bet.amount * LOSS_MULTIPLIER) / 100;\\n\\n\\t\\trequire(reserve >= payout, \\\"Insufficient reserve\\\");\\n\\n\\t\\tpayable(msg.sender).transfer(payout);\\n\\t\\treserve -= payout;\\n\\n\\t\\tbet.resolved = true;\\n\\t\\tbet.win = win;\\n\\n\\t\\temit BetResolved(msg.sender, _betIndex, win, payout);\\n\\t}\\n\\n\\tfunction addSixtySeconds(uint256 timestamp) public pure returns (uint256) {\\n\\t\\treturn timestamp + 60;\\n\\t}\\n}\\n\",\"keccak256\":\"0xd87d3d74d6abed335fd9c61dc0d4b40b331ce9a80fa189975c65ec1313922952\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040527f66756e2d657468657265756d2d7365706f6c69612d31000000000000000000006001556000600255604051610f67380380610f6783398101604081905261004b91610098565b600080546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b038516171781556002805434929061008b9084906100ea565b9091555061011192505050565b600080604083850312156100ab57600080fd5b82516001600160a01b03811681146100c257600080fd5b60208401519092506001600160401b03811681146100df57600080fd5b809150509250929050565b8082018082111561010b57634e487b7160e01b600052601160045260246000fd5b92915050565b610e47806101206000396000f3fe6080604052600436106100c25760003560e01c806380e9cd751161007f5780639326335d116100595780639326335d1461021d578063cd3293de14610232578063ed6ddfa014610248578063f33e1d7f1461029457600080fd5b806380e9cd75146101b257806381995dee146101d25780638d2f48ad1461020857600080fd5b806309c1ba2e146100c75780631e00c5a51461010d5780634c36c36e14610122578063550ed1f0146101425780635f48f76c146101655780637dc0d1d01461017a575b600080fd5b3480156100d357600080fd5b506000546100ef90600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b61012061011b366004610afe565b6102a9565b005b34801561012e57600080fd5b5061012061013d366004610b33565b6105fb565b34801561014e57600080fd5b506101576108f8565b604051908152602001610104565b34801561017157600080fd5b50610157609681565b34801561018657600080fd5b5060005461019a906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b3480156101be57600080fd5b506101576101cd366004610b33565b61091a565b3480156101de57600080fd5b506101576101ed366004610b68565b6001600160a01b031660009081526003602052604090205490565b34801561021457600080fd5b50610157605a81565b34801561022957600080fd5b50610157600381565b34801561023e57600080fd5b5061015760025481565b34801561025457600080fd5b50610268610263366004610b8a565b61092d565b60408051958652931515602086015292840191909152151560608301521515608082015260a001610104565b3480156102a057600080fd5b50610157603281565b8134146102f45760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd081d985b1d59481cd95b9d60621b60448201526064015b60405180910390fd5b6064605a6002546103059190610bca565b61030f9190610be1565b8211156103695760405162461bcd60e51b815260206004820152602260248201527f42657420616d6f756e742065786365656473206d6178696d756d20616c6c6f77604482015261195960f21b60648201526084016102eb565b60006064610378600385610bca565b6103829190610be1565b905060006103908285610c03565b905081600260008282546103a49190610c16565b9091555050336000908152600360208181526040808420815160a0810183528681528a15158185019081528184018a81526060808401898152608085018a8152865460018082018955978c52898c20965160049091029096019586559351958501805460ff19169615159690961790955590516002808501919091559351929096018054915161ffff1990921692151561ff001916929092176101009115159190910217905581518181529384019091529082015b606081526020019060019003908161045957505060408051600080825260208201909252919250908161049c565b60608152602001906001900390816104875790505b5090506104a885610982565b826000815181106104bb576104bb610c3f565b602090810291909101015260006104d386603c610c16565b90506104de81610982565b836001815181106104f1576104f1610c3f565b602090810291909101015260008054600154604051635fb60ca360e01b81526001600160a01b03831693635fb60ca39361054d93919283928a928a92600160a01b90910467ffffffffffffffff1691620493e091600401610cf0565b6020604051808303816000875af115801561056c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105909190610dbe565b50336000908152600360205260409020546105ad90600190610c03565b604080518681528a1515602082015290810188905233907f94b957532865eb7d3e939066462e42ad12109202dff0ce260d43eb264d68f41e9060600160405180910390a35050505050505050565b3360009081526003602052604090205481106106525760405162461bcd60e51b815260206004820152601660248201527542657420696e646578206f7574206f662072616e676560501b60448201526064016102eb565b33600090815260036020526040812080548390811061067357610673610c3f565b60009182526020909120600490910201600381015490915060ff16156106d25760405162461bcd60e51b815260206004820152601460248201527310995d08185b1c9958591e481c995cdbdb1d995960621b60448201526064016102eb565b60008054600283015482916001600160a01b03169063af3fde1f906106f881603c610c16565b6040516001600160e01b031960e085901b168152600481019290925260248201526044016040805180830381865afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190610dd7565b91509150806107ad5760405162461bcd60e51b815260206004820152601b60248201527f4f7261636c6520726573706f6e7365206e6f742079657420736574000000000060448201526064016102eb565b600183015460ff161515821515146000816107e25784546064906107d390603290610bca565b6107dd9190610be1565b6107fd565b84546064906107f390609690610bca565b6107fd9190610be1565b90508060025410156108485760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e74207265736572766560601b60448201526064016102eb565b604051339082156108fc029083906000818181858888f19350505050158015610875573d6000803e3d6000fd5b5080600260008282546108889190610c03565b90915550506003850180548315156101000261ffff19909116176001179055604051869033907f14306f48f26a52fec5183f49b3a229b1ee86fba81b36ce97f308c7d7971e11b6906108e890869086909115158252602082015260400190565b60405180910390a3505050505050565b60006064605a60025461090b9190610bca565b6109159190610be1565b905090565b600061092782603c610c16565b92915050565b6003602052816000526040600020818154811061094957600080fd5b6000918252602090912060049091020180546001820154600283015460039093015491945060ff90811693508181169161010090041685565b6060600061098f83610a15565b600101905060008167ffffffffffffffff8111156109af576109af610c29565b6040519080825280601f01601f1916602001820160405280156109d9576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846109e357509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610a545772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610a80576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610a9e57662386f26fc10000830492506010015b6305f5e1008310610ab6576305f5e100830492506008015b6127108310610aca57612710830492506004015b60648310610adc576064830492506002015b600a83106109275760010192915050565b8015158114610afb57600080fd5b50565b600080600060608486031215610b1357600080fd5b8335610b1e81610aed565b95602085013595506040909401359392505050565b600060208284031215610b4557600080fd5b5035919050565b80356001600160a01b0381168114610b6357600080fd5b919050565b600060208284031215610b7a57600080fd5b610b8382610b4c565b9392505050565b60008060408385031215610b9d57600080fd5b610ba683610b4c565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761092757610927610bb4565b600082610bfe57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561092757610927610bb4565b8082018082111561092757610927610bb4565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015610c7b57602081850181015186830182015201610c5f565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b8101915082860160005b85811015610ce3578284038952610cd1848351610c55565b98850198935090840190600101610cb9565b5091979650505050505050565b610100808252600090820181905260ff891660208084019190915267ffffffffffffffff8916604084015261012060608401819052885190840181905261014080850192600583901b8601909101918a8201855b82811015610d735761013f19888603018652610d61858351610c55565b95840195945090830190600101610d44565b505050508381036080850152610d898189610c9b565b92505050610da360a083018667ffffffffffffffff169052565b63ffffffff9390931660c082015260e0015295945050505050565b600060208284031215610dd057600080fd5b5051919050565b60008060408385031215610dea57600080fd5b8251610df581610aed565b6020840151909250610e0681610aed565b80915050925092905056fea26469706673582212200c8ebc4a549ef433e7e55540b77b2202124684395fef8cd026463f386f40714664736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806380e9cd751161007f5780639326335d116100595780639326335d1461021d578063cd3293de14610232578063ed6ddfa014610248578063f33e1d7f1461029457600080fd5b806380e9cd75146101b257806381995dee146101d25780638d2f48ad1461020857600080fd5b806309c1ba2e146100c75780631e00c5a51461010d5780634c36c36e14610122578063550ed1f0146101425780635f48f76c146101655780637dc0d1d01461017a575b600080fd5b3480156100d357600080fd5b506000546100ef90600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b61012061011b366004610afe565b6102a9565b005b34801561012e57600080fd5b5061012061013d366004610b33565b6105fb565b34801561014e57600080fd5b506101576108f8565b604051908152602001610104565b34801561017157600080fd5b50610157609681565b34801561018657600080fd5b5060005461019a906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b3480156101be57600080fd5b506101576101cd366004610b33565b61091a565b3480156101de57600080fd5b506101576101ed366004610b68565b6001600160a01b031660009081526003602052604090205490565b34801561021457600080fd5b50610157605a81565b34801561022957600080fd5b50610157600381565b34801561023e57600080fd5b5061015760025481565b34801561025457600080fd5b50610268610263366004610b8a565b61092d565b60408051958652931515602086015292840191909152151560608301521515608082015260a001610104565b3480156102a057600080fd5b50610157603281565b8134146102f45760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd081d985b1d59481cd95b9d60621b60448201526064015b60405180910390fd5b6064605a6002546103059190610bca565b61030f9190610be1565b8211156103695760405162461bcd60e51b815260206004820152602260248201527f42657420616d6f756e742065786365656473206d6178696d756d20616c6c6f77604482015261195960f21b60648201526084016102eb565b60006064610378600385610bca565b6103829190610be1565b905060006103908285610c03565b905081600260008282546103a49190610c16565b9091555050336000908152600360208181526040808420815160a0810183528681528a15158185019081528184018a81526060808401898152608085018a8152865460018082018955978c52898c20965160049091029096019586559351958501805460ff19169615159690961790955590516002808501919091559351929096018054915161ffff1990921692151561ff001916929092176101009115159190910217905581518181529384019091529082015b606081526020019060019003908161045957505060408051600080825260208201909252919250908161049c565b60608152602001906001900390816104875790505b5090506104a885610982565b826000815181106104bb576104bb610c3f565b602090810291909101015260006104d386603c610c16565b90506104de81610982565b836001815181106104f1576104f1610c3f565b602090810291909101015260008054600154604051635fb60ca360e01b81526001600160a01b03831693635fb60ca39361054d93919283928a928a92600160a01b90910467ffffffffffffffff1691620493e091600401610cf0565b6020604051808303816000875af115801561056c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105909190610dbe565b50336000908152600360205260409020546105ad90600190610c03565b604080518681528a1515602082015290810188905233907f94b957532865eb7d3e939066462e42ad12109202dff0ce260d43eb264d68f41e9060600160405180910390a35050505050505050565b3360009081526003602052604090205481106106525760405162461bcd60e51b815260206004820152601660248201527542657420696e646578206f7574206f662072616e676560501b60448201526064016102eb565b33600090815260036020526040812080548390811061067357610673610c3f565b60009182526020909120600490910201600381015490915060ff16156106d25760405162461bcd60e51b815260206004820152601460248201527310995d08185b1c9958591e481c995cdbdb1d995960621b60448201526064016102eb565b60008054600283015482916001600160a01b03169063af3fde1f906106f881603c610c16565b6040516001600160e01b031960e085901b168152600481019290925260248201526044016040805180830381865afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c9190610dd7565b91509150806107ad5760405162461bcd60e51b815260206004820152601b60248201527f4f7261636c6520726573706f6e7365206e6f742079657420736574000000000060448201526064016102eb565b600183015460ff161515821515146000816107e25784546064906107d390603290610bca565b6107dd9190610be1565b6107fd565b84546064906107f390609690610bca565b6107fd9190610be1565b90508060025410156108485760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e74207265736572766560601b60448201526064016102eb565b604051339082156108fc029083906000818181858888f19350505050158015610875573d6000803e3d6000fd5b5080600260008282546108889190610c03565b90915550506003850180548315156101000261ffff19909116176001179055604051869033907f14306f48f26a52fec5183f49b3a229b1ee86fba81b36ce97f308c7d7971e11b6906108e890869086909115158252602082015260400190565b60405180910390a3505050505050565b60006064605a60025461090b9190610bca565b6109159190610be1565b905090565b600061092782603c610c16565b92915050565b6003602052816000526040600020818154811061094957600080fd5b6000918252602090912060049091020180546001820154600283015460039093015491945060ff90811693508181169161010090041685565b6060600061098f83610a15565b600101905060008167ffffffffffffffff8111156109af576109af610c29565b6040519080825280601f01601f1916602001820160405280156109d9576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846109e357509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610a545772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610a80576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610a9e57662386f26fc10000830492506010015b6305f5e1008310610ab6576305f5e100830492506008015b6127108310610aca57612710830492506004015b60648310610adc576064830492506002015b600a83106109275760010192915050565b8015158114610afb57600080fd5b50565b600080600060608486031215610b1357600080fd5b8335610b1e81610aed565b95602085013595506040909401359392505050565b600060208284031215610b4557600080fd5b5035919050565b80356001600160a01b0381168114610b6357600080fd5b919050565b600060208284031215610b7a57600080fd5b610b8382610b4c565b9392505050565b60008060408385031215610b9d57600080fd5b610ba683610b4c565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761092757610927610bb4565b600082610bfe57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561092757610927610bb4565b8082018082111561092757610927610bb4565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015610c7b57602081850181015186830182015201610c5f565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b8101915082860160005b85811015610ce3578284038952610cd1848351610c55565b98850198935090840190600101610cb9565b5091979650505050505050565b610100808252600090820181905260ff891660208084019190915267ffffffffffffffff8916604084015261012060608401819052885190840181905261014080850192600583901b8601909101918a8201855b82811015610d735761013f19888603018652610d61858351610c55565b95840195945090830190600101610d44565b505050508381036080850152610d898189610c9b565b92505050610da360a083018667ffffffffffffffff169052565b63ffffffff9390931660c082015260e0015295945050505050565b600060208284031215610dd057600080fd5b5051919050565b60008060408385031215610dea57600080fd5b8251610df581610aed565b6020840151909250610e0681610aed565b80915050925092905056fea26469706673582212200c8ebc4a549ef433e7e55540b77b2202124684395fef8cd026463f386f40714664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1240,
        "contract": "contracts/FlipTheCoin.sol:FlipTheCoin",
        "label": "oracle",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IETHOracle)1237"
      },
      {
        "astId": 1242,
        "contract": "contracts/FlipTheCoin.sol:FlipTheCoin",
        "label": "subscriptionId",
        "offset": 20,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 1245,
        "contract": "contracts/FlipTheCoin.sol:FlipTheCoin",
        "label": "donID",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 1260,
        "contract": "contracts/FlipTheCoin.sol:FlipTheCoin",
        "label": "reserve",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1277,
        "contract": "contracts/FlipTheCoin.sol:FlipTheCoin",
        "label": "betsByAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(Bet)1271_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bet)1271_storage)dyn_storage": {
        "base": "t_struct(Bet)1271_storage",
        "encoding": "dynamic_array",
        "label": "struct FlipTheCoin.Bet[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IETHOracle)1237": {
        "encoding": "inplace",
        "label": "contract IETHOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Bet)1271_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FlipTheCoin.Bet[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Bet)1271_storage)dyn_storage"
      },
      "t_struct(Bet)1271_storage": {
        "encoding": "inplace",
        "label": "struct FlipTheCoin.Bet",
        "members": [
          {
            "astId": 1262,
            "contract": "contracts/FlipTheCoin.sol:FlipTheCoin",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1264,
            "contract": "contracts/FlipTheCoin.sol:FlipTheCoin",
            "label": "prediction",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1266,
            "contract": "contracts/FlipTheCoin.sol:FlipTheCoin",
            "label": "betTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1268,
            "contract": "contracts/FlipTheCoin.sol:FlipTheCoin",
            "label": "resolved",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1270,
            "contract": "contracts/FlipTheCoin.sol:FlipTheCoin",
            "label": "win",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}