{
  "address": "0x77E1Bb33d34392b3C0dB5dFFDbADceED752aFC3b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_source",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "UnexpectedRequestID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "priceIncreased",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "Response",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toTimestamp",
          "type": "uint256"
        }
      ],
      "name": "didPriceIncrease",
      "outputs": [
        {
          "internalType": "bool",
          "name": "priceIncreased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priceIncreasedBetweenTimestamps",
      "outputs": [
        {
          "internalType": "bool",
          "name": "priceIncreased",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encryptedSecretsUrls",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "donHostedSecretsSlotID",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "donHostedSecretsVersion",
          "type": "uint64"
        },
        {
          "internalType": "string[]",
          "name": "args",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "bytesArgs",
          "type": "bytes[]"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "donID",
          "type": "bytes32"
        }
      ],
      "name": "sendRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "request",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "donID",
          "type": "bytes32"
        }
      ],
      "name": "sendRequestCBOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "source",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xce48bc75f9bd91ff846286b76f53a75ab55d734307ce85b9be4eb03da87e4402",
  "receipt": {
    "to": null,
    "from": "0x9EFBF76717729978543c49a961B4a784Ce97F318",
    "contractAddress": "0x77E1Bb33d34392b3C0dB5dFFDbADceED752aFC3b",
    "transactionIndex": 29,
    "gasUsed": "2231694",
    "logsBloom": "0x
    "blockHash": "0x4d2cce5ca62ed312e004f78b8e8dc1c81b5df81e9d38c548df3413d0389f8dcd",
    "transactionHash": "0xce48bc75f9bd91ff846286b76f53a75ab55d734307ce85b9be4eb03da87e4402",
    "logs": [],
    "blockNumber": 5950797,
    "cumulativeGasUsed": "6682095",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb83E47C2bC239B3bf370bc41e1459A34b41238D0",
    "const ethers = await import(\"npm:ethers@6.10.0\");\n\nconst fromTimestamp = args[0];\nconst toTimestamp = args[1];\n\nconst URL_PREVIOUS = `https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=` + fromTimestamp;\n\nconst URL_CURRENT = `https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=` + toTimestamp;\n\nconst apiResponsePrevious = await Functions.makeHttpRequest({\n  url: URL_PREVIOUS,\n});\nconst apiResponseCurrent = await Functions.makeHttpRequest({\n  url: URL_CURRENT,\n});\n\nconst dataPrevious = apiResponsePrevious.data;\nconst dataCurrent = apiResponseCurrent.data;\n\nconst previousEthPrice = Math.round(dataPrevious.ETH.USD * 10 ** 4);\nconst currentEthPrice = Math.round(dataCurrent.ETH.USD * 10 ** 4);\n\nconst encoded = ethers.AbiCoder.defaultAbiCoder().encode(\n  [\"bool\", \"uint256\", \"uint256\"],\n  [currentEthPrice > previousEthPrice, fromTimestamp, toTimestamp],\n);\n\nreturn ethers.getBytes(encoded);\n"
  ],
  "numDeployments": 12,
  "solcInputHash": "bd88f0bc10350f79769075f047d45bb3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_source\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedRequestID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"priceIncreased\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"Response\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTimestamp\",\"type\":\"uint256\"}],\"name\":\"didPriceIncrease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"priceIncreased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceIncreasedBetweenTimestamps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"priceIncreased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedSecretsUrls\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"donHostedSecretsSlotID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"donHostedSecretsVersion\",\"type\":\"uint64\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"bytesArgs\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"donID\",\"type\":\"bytes32\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"donID\",\"type\":\"bytes32\"}],\"name\":\"sendRequestCBOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"source\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETHOracle.sol\":\"ETHOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x927e505bb87a58ea04d1a9efe945f4bf4093e88b618b6fede3b9c68e1e63d989\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"contracts/ETHOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { FunctionsClient } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\nimport { ConfirmedOwner } from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport { FunctionsRequest } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\ncontract ETHOracle is FunctionsClient, ConfirmedOwner {\\n\\tusing FunctionsRequest for FunctionsRequest.Request;\\n\\n\\tstring public source;\\n\\tbytes32 public s_lastRequestId;\\n\\tbytes public s_lastResponse;\\n\\tbytes public s_lastError;\\n\\n\\t// Optimized mapping to store price comparison between two timestamps\\n\\tstruct PriceData {\\n\\t\\tbool priceIncreased;\\n\\t\\tbool isSet;\\n\\t}\\n\\n\\tmapping(uint256 => mapping(uint256 => PriceData))\\n\\t\\tpublic priceIncreasedBetweenTimestamps;\\n\\n\\terror UnexpectedRequestID(bytes32 requestId);\\n\\n\\tevent Response(\\n\\t\\tbytes32 indexed requestId,\\n\\t\\tbool priceIncreased,\\n\\t\\tuint256 previousTimestamp,\\n\\t\\tuint256 currentTimestamp,\\n\\t\\tbytes err\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress router,\\n\\t\\tstring memory _source\\n\\t) FunctionsClient(router) ConfirmedOwner(msg.sender) {\\n\\t\\tsource = _source;\\n\\t}\\n\\n\\tfunction sendRequest(\\n\\t\\tbytes memory encryptedSecretsUrls,\\n\\t\\tuint8 donHostedSecretsSlotID,\\n\\t\\tuint64 donHostedSecretsVersion,\\n\\t\\tstring[] memory args,\\n\\t\\tbytes[] memory bytesArgs,\\n\\t\\tuint64 subscriptionId,\\n\\t\\tuint32 gasLimit,\\n\\t\\tbytes32 donID\\n\\t) external returns (bytes32 requestId) {\\n\\t\\tFunctionsRequest.Request memory req;\\n\\t\\treq.initializeRequestForInlineJavaScript(source);\\n\\t\\tif (encryptedSecretsUrls.length > 0)\\n\\t\\t\\treq.addSecretsReference(encryptedSecretsUrls);\\n\\t\\telse if (donHostedSecretsVersion > 0) {\\n\\t\\t\\treq.addDONHostedSecrets(\\n\\t\\t\\t\\tdonHostedSecretsSlotID,\\n\\t\\t\\t\\tdonHostedSecretsVersion\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tif (args.length > 0) req.setArgs(args);\\n\\t\\tif (bytesArgs.length > 0) req.setBytesArgs(bytesArgs);\\n\\t\\ts_lastRequestId = _sendRequest(\\n\\t\\t\\treq.encodeCBOR(),\\n\\t\\t\\tsubscriptionId,\\n\\t\\t\\tgasLimit,\\n\\t\\t\\tdonID\\n\\t\\t);\\n\\t\\treturn s_lastRequestId;\\n\\t}\\n\\n\\tfunction sendRequestCBOR(\\n\\t\\tbytes memory request,\\n\\t\\tuint64 subscriptionId,\\n\\t\\tuint32 gasLimit,\\n\\t\\tbytes32 donID\\n\\t) external returns (bytes32 requestId) {\\n\\t\\ts_lastRequestId = _sendRequest(\\n\\t\\t\\trequest,\\n\\t\\t\\tsubscriptionId,\\n\\t\\t\\tgasLimit,\\n\\t\\t\\tdonID\\n\\t\\t);\\n\\t\\treturn s_lastRequestId;\\n\\t}\\n\\n\\tfunction fulfillRequest(\\n\\t\\tbytes32 requestId,\\n\\t\\tbytes memory response,\\n\\t\\tbytes memory err\\n\\t) internal override {\\n\\t\\tif (s_lastRequestId != requestId) {\\n\\t\\t\\trevert UnexpectedRequestID(requestId);\\n\\t\\t}\\n\\n\\t\\ts_lastResponse = response;\\n\\t\\ts_lastError = err;\\n\\n\\t\\t(\\n\\t\\t\\tbool priceIncreased,\\n\\t\\t\\tuint256 previousTimestamp,\\n\\t\\t\\tuint256 currentTimestamp\\n\\t\\t) = abi.decode(response, (bool, uint256, uint256));\\n\\n\\t\\tpriceIncreasedBetweenTimestamps[previousTimestamp][\\n\\t\\t\\tcurrentTimestamp\\n\\t\\t] = PriceData(priceIncreased, true);\\n\\n\\t\\temit Response(\\n\\t\\t\\trequestId,\\n\\t\\t\\tpriceIncreased,\\n\\t\\t\\tpreviousTimestamp,\\n\\t\\t\\tcurrentTimestamp,\\n\\t\\t\\terr\\n\\t\\t);\\n\\t}\\n\\n\\tfunction didPriceIncrease(\\n\\t\\tuint256 fromTimestamp,\\n\\t\\tuint256 toTimestamp\\n\\t) public view returns (bool priceIncreased, bool isSet) {\\n\\t\\tPriceData memory data = priceIncreasedBetweenTimestamps[fromTimestamp][\\n\\t\\t\\ttoTimestamp\\n\\t\\t];\\n\\t\\treturn (data.priceIncreased, data.isSet);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2630e764485309f5747e66ed9459b99ab8dd727fa868c5001ddd5b9e8969b9a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001e0e38038062001e0e8339810160408190526200003491620001a8565b6001600160a01b0382166080523380600081620000985760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000cb57620000cb81620000e7565b5060029150620000de905082826200032d565b505050620003f9565b336001600160a01b03821603620001415760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016200008f565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620001bc57600080fd5b82516001600160a01b0381168114620001d457600080fd5b602084810151919350906001600160401b0380821115620001f457600080fd5b818601915086601f8301126200020957600080fd5b8151818111156200021e576200021e62000192565b604051601f8201601f19908116603f0116810190838211818310171562000249576200024962000192565b8160405282815289868487010111156200026257600080fd5b600093505b8284101562000286578484018601518185018701529285019262000267565b60008684830101528096505050505050509250929050565b600181811c90821680620002b357607f821691505b602082108103620002d457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032857600081815260208120601f850160051c81016020861015620003035750805b601f850160051c820191505b8181101562000324578281556001016200030f565b5050505b505050565b81516001600160401b0381111562000349576200034962000192565b62000361816200035a84546200029e565b84620002da565b602080601f831160018114620003995760008415620003805750858301515b600019600386901b1c1916600185901b17855562000324565b600085815260208120601f198616915b82811015620003ca57888601518255948401946001909101908401620003a9565b5085821015620003e95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516119f26200041c600039600081816102180152610a7001526119f26000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146101255780639681096f14610140578063af3fde1f14610153578063b1e21749146101ba578063d5a837e2146101c3578063f2fde38b146101fa57600080fd5b80630ca76175146100b95780633944ea3a146100ce5780634b0795a8146100ec5780635fb60ca3146100f457806367e828bf1461011557806379ba50971461011d575b600080fd5b6100cc6100c736600461122c565b61020d565b005b6100d6610291565b6040516100e391906112de565b60405180910390f35b6100d661031f565b610107610102366004611478565b61032c565b6040519081526020016100e3565b6100d6610485565b6100cc610492565b6000546040516001600160a01b0390911681526020016100e3565b61010761014e36600461154c565b610541565b6101a36101613660046115b1565b60009182526006602090815260408084209284529181529181902081518083019092525460ff8082161515808452610100909204161515919092018190529091565b6040805192151583529015156020830152016100e3565b61010760035481565b6101a36101d13660046115b1565b600660209081526000928352604080842090915290825290205460ff8082169161010090041682565b6100cc6102083660046115d3565b61055d565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102565760405163c6829f8360e01b815260040160405180910390fd5b610261838383610571565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6004805461029e906115fc565b80601f01602080910402602001604051908101604052809291908181526020018280546102ca906115fc565b80156103175780601f106102ec57610100808354040283529160200191610317565b820191906000526020600020905b8154815290600101906020018083116102fa57829003601f168201915b505050505081565b6005805461029e906115fc565b600061036f6040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b61040c6002805461037f906115fc565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab906115fc565b80156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b50505050508261066790919063ffffffff16565b8951156104225761041d818b610678565b61043c565b6001600160401b0388161561043c5761043c818a8a6106a9565b86511561044d5761044d818861073f565b85511561045e5761045e8187610769565b61047261046a82610793565b868686610a6b565b60038190559a9950505050505050505050565b6002805461029e906115fc565b6001546001600160a01b031633146104ea5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600061054f85858585610a6b565b600381905595945050505050565b610565610b3d565b61056e81610b92565b50565b82600354146105965760405163d068bf5b60e01b8152600481018490526024016104e1565b60046105a28382611684565b5060056105af8282611684565b506000806000848060200190518101906105c99190611743565b60408051808201825284151581526001602080830191825260008681526006825284812086825290915283902091518254915161ffff1990921690151561ff001916176101009115159190910217905551929550909350915086907fc29271fcf14c32ed21254327824a424f1c307e6053ac169c09789dce02f6ce7890610657908690869086908a9061177f565b60405180910390a2505050505050565b6106748260008084610c3b565b5050565b805160000361069a5760405163e889636f60e01b815260040160405180910390fd5b60016020830152608090910152565b60006106b6610100610cb9565b90506106e9604051806040016040528060068152602001651cdb1bdd125160d21b81525082610cda90919063ffffffff16565b6106f68160ff8516610cf8565b6040805180820190915260078152663b32b939b4b7b760c91b602082015261071f908290610cda565b6107298183610cf8565b6002602085015251516080909301929092525050565b80516000036107615760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b805160000361078b5760405163fe936cb760e01b815260040160405180910390fd5b60c090910152565b606060006107a2610100610cb9565b90506107db6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082610cda90919063ffffffff16565b82516107f99060028111156107f2576107f26117b0565b8290610d04565b6040805180820190915260088152676c616e677561676560c01b6020820152610823908290610cda565b604083015161083a9080156107f2576107f26117b0565b604080518082019091526006815265736f7572636560d01b6020820152610862908290610cda565b6060830151610872908290610cda565b60a08301515115610906576040805180820190915260048152636172677360e01b60208201526108a3908290610cda565b6108ac81610d3d565b60005b8360a00151518110156108fc576108ec8460a0015182815181106108d5576108d56117c6565b602002602001015183610cda90919063ffffffff16565b6108f5816117f2565b90506108af565b5061090681610d61565b608083015151156109ca57600083602001516002811115610929576109296117b0565b036109475760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152610978908290610cda565b610991836020015160028111156107f2576107f26117b0565b6040805180820190915260078152667365637265747360c81b60208201526109ba908290610cda565b60808301516109ca908290610d7f565b60c08301515115610a635760408051808201909152600981526862797465734172677360b81b6020820152610a00908290610cda565b610a0981610d3d565b60005b8360c0015151811015610a5957610a498460c001518281518110610a3257610a326117c6565b602002602001015183610d7f90919063ffffffff16565b610a52816117f2565b9050610a0c565b50610a6381610d61565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401610ac395949392919061180b565b6020604051808303816000875af1158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b069190611854565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b6000546001600160a01b03163314610b905760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016104e1565b565b336001600160a01b03821603610bea5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016104e1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b8051600003610c5d576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115610c7057610c706117b0565b90816002811115610c8357610c836117b0565b90525060408401828015610c9957610c996117b0565b90818015610ca957610ca96117b0565b9052506060909301929092525050565b610cc161113a565b8051610ccd9083610d8c565b5060006020820152919050565b610ce78260038351610e06565b8151610cf39082610f25565b505050565b61067482600083610e06565b8151610d119060c2610f4d565b506106748282604051602001610d2991815260200190565b604051602081830303815290604052610d7f565b610d48816004610fb6565b600181602001818151610d5b919061186d565b90525050565b610d6c816007610fb6565b600181602001818151610d5b9190611880565b610ce78260028351610e06565b604080518082019091526060815260006020820152610dac602083611893565b15610dd457610dbc602083611893565b610dc7906020611880565b610dd1908361186d565b91505b602080840183905260405180855260008152908184010181811015610df857600080fd5b604052508290505b92915050565b6017816001600160401b031611610e32578251610e2c9060e0600585901b168317610f4d565b50505050565b60ff816001600160401b031611610e72578251610e5a906018611fe0600586901b1617610f4d565b508251610e2c906001600160401b0383166001610fcd565b61ffff816001600160401b031611610eb3578251610e9b906019611fe0600586901b1617610f4d565b508251610e2c906001600160401b0383166002610fcd565b63ffffffff816001600160401b031611610ef6578251610ede90601a611fe0600586901b1617610f4d565b508251610e2c906001600160401b0383166004610fcd565b8251610f0d90601b611fe0600586901b1617610f4d565b508251610e2c906001600160401b0383166008610fcd565b604080518082019091526060815260006020820152610f4683838451611052565b9392505050565b6040805180820190915260608152600060208201528251516000610f7282600161186d565b905084602001518210610f9357610f9385610f8e8360026118b5565b611123565b8451602083820101858153508051821115610fac578181525b5093949350505050565b8151610cf390601f611fe0600585901b1617610f4d565b6040805180820190915260608152600060208201528351516000610ff1828561186d565b9050856020015181111561100e5761100e86610f8e8360026118b5565b6000600161101e866101006119b0565b6110289190611880565b90508651828101878319825116178152508051831115611046578281525b50959695505050505050565b604080518082019091526060815260006020820152825182111561107557600080fd5b8351516000611084848361186d565b905085602001518111156110a1576110a186610f8e8360026118b5565b8551805183820160200191600091808511156110bb578482525b505050602086015b602086106110fb57805182526110da60208361186d565b91506110e760208261186d565b90506110f4602087611880565b95506110c3565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b815161112f8383610d8c565b50610e2c8382610f25565b6040518060400160405280611162604051806040016040528060608152602001600081525090565b8152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156111ad576111ad61116f565b604052919050565b60006001600160401b038311156111ce576111ce61116f565b6111e1601f8401601f1916602001611185565b90508281528383830111156111f557600080fd5b828260208301376000602084830101529392505050565b600082601f83011261121d57600080fd5b610f46838335602085016111b5565b60008060006060848603121561124157600080fd5b8335925060208401356001600160401b038082111561125f57600080fd5b61126b8783880161120c565b9350604086013591508082111561128157600080fd5b5061128e8682870161120c565b9150509250925092565b6000815180845260005b818110156112be576020818501810151868301820152016112a2565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610f466020830184611298565b803560ff8116811461130257600080fd5b919050565b80356001600160401b038116811461130257600080fd5b60006001600160401b038211156113375761133761116f565b5060051b60200190565b600082601f83011261135257600080fd5b813560206113676113628361131e565b611185565b82815260059290921b8401810191818101908684111561138657600080fd5b8286015b848110156113da5780356001600160401b038111156113a95760008081fd5b8701603f810189136113bb5760008081fd5b6113cc8986830135604084016111b5565b84525091830191830161138a565b509695505050505050565b600082601f8301126113f657600080fd5b813560206114066113628361131e565b82815260059290921b8401810191818101908684111561142557600080fd5b8286015b848110156113da5780356001600160401b038111156114485760008081fd5b6114568986838b010161120c565b845250918301918301611429565b803563ffffffff8116811461130257600080fd5b600080600080600080600080610100898b03121561149557600080fd5b88356001600160401b03808211156114ac57600080fd5b6114b88c838d0161120c565b99506114c660208c016112f1565b98506114d460408c01611307565b975060608b01359150808211156114ea57600080fd5b6114f68c838d01611341565b965060808b013591508082111561150c57600080fd5b506115198b828c016113e5565b94505061152860a08a01611307565b925061153660c08a01611464565b915060e089013590509295985092959890939650565b6000806000806080858703121561156257600080fd5b84356001600160401b0381111561157857600080fd5b6115848782880161120c565b94505061159360208601611307565b92506115a160408601611464565b9396929550929360600135925050565b600080604083850312156115c457600080fd5b50508035926020909101359150565b6000602082840312156115e557600080fd5b81356001600160a01b0381168114610f4657600080fd5b600181811c9082168061161057607f821691505b60208210810361163057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610cf357600081815260208120601f850160051c8101602086101561165d5750805b601f850160051c820191505b8181101561167c57828155600101611669565b505050505050565b81516001600160401b0381111561169d5761169d61116f565b6116b1816116ab84546115fc565b84611636565b602080601f8311600181146116e657600084156116ce5750858301515b600019600386901b1c1916600185901b17855561167c565b600085815260208120601f198616915b82811015611715578886015182559484019460019091019084016116f6565b50858210156117335787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008060006060848603121561175857600080fd5b8351801515811461176857600080fd5b602085015160409095015190969495509392505050565b84151581528360208201528260408201526080606082015260006117a66080830184611298565b9695505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611804576118046117dc565b5060010190565b6001600160401b038616815260a06020820152600061182d60a0830187611298565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b60006020828403121561186657600080fd5b5051919050565b80820180821115610e0057610e006117dc565b81810381811115610e0057610e006117dc565b6000826118b057634e487b7160e01b600052601260045260246000fd5b500690565b8082028115828204841417610e0057610e006117dc565b600181815b808511156119075781600019048211156118ed576118ed6117dc565b808516156118fa57918102915b93841c93908002906118d1565b509250929050565b60008261191e57506001610e00565b8161192b57506000610e00565b8160018114611941576002811461194b57611967565b6001915050610e00565b60ff84111561195c5761195c6117dc565b50506001821b610e00565b5060208310610133831016604e8410600b841016171561198a575081810a610e00565b61199483836118cc565b80600019048211156119a8576119a86117dc565b029392505050565b6000610f46838361190f56fea26469706673582212206a978f485f07f889d959a98802a5ea2e54b1590333dbdbcf1ae807bab823af7664736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146101255780639681096f14610140578063af3fde1f14610153578063b1e21749146101ba578063d5a837e2146101c3578063f2fde38b146101fa57600080fd5b80630ca76175146100b95780633944ea3a146100ce5780634b0795a8146100ec5780635fb60ca3146100f457806367e828bf1461011557806379ba50971461011d575b600080fd5b6100cc6100c736600461122c565b61020d565b005b6100d6610291565b6040516100e391906112de565b60405180910390f35b6100d661031f565b610107610102366004611478565b61032c565b6040519081526020016100e3565b6100d6610485565b6100cc610492565b6000546040516001600160a01b0390911681526020016100e3565b61010761014e36600461154c565b610541565b6101a36101613660046115b1565b60009182526006602090815260408084209284529181529181902081518083019092525460ff8082161515808452610100909204161515919092018190529091565b6040805192151583529015156020830152016100e3565b61010760035481565b6101a36101d13660046115b1565b600660209081526000928352604080842090915290825290205460ff8082169161010090041682565b6100cc6102083660046115d3565b61055d565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102565760405163c6829f8360e01b815260040160405180910390fd5b610261838383610571565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6004805461029e906115fc565b80601f01602080910402602001604051908101604052809291908181526020018280546102ca906115fc565b80156103175780601f106102ec57610100808354040283529160200191610317565b820191906000526020600020905b8154815290600101906020018083116102fa57829003601f168201915b505050505081565b6005805461029e906115fc565b600061036f6040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b61040c6002805461037f906115fc565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab906115fc565b80156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b50505050508261066790919063ffffffff16565b8951156104225761041d818b610678565b61043c565b6001600160401b0388161561043c5761043c818a8a6106a9565b86511561044d5761044d818861073f565b85511561045e5761045e8187610769565b61047261046a82610793565b868686610a6b565b60038190559a9950505050505050505050565b6002805461029e906115fc565b6001546001600160a01b031633146104ea5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b600061054f85858585610a6b565b600381905595945050505050565b610565610b3d565b61056e81610b92565b50565b82600354146105965760405163d068bf5b60e01b8152600481018490526024016104e1565b60046105a28382611684565b5060056105af8282611684565b506000806000848060200190518101906105c99190611743565b60408051808201825284151581526001602080830191825260008681526006825284812086825290915283902091518254915161ffff1990921690151561ff001916176101009115159190910217905551929550909350915086907fc29271fcf14c32ed21254327824a424f1c307e6053ac169c09789dce02f6ce7890610657908690869086908a9061177f565b60405180910390a2505050505050565b6106748260008084610c3b565b5050565b805160000361069a5760405163e889636f60e01b815260040160405180910390fd5b60016020830152608090910152565b60006106b6610100610cb9565b90506106e9604051806040016040528060068152602001651cdb1bdd125160d21b81525082610cda90919063ffffffff16565b6106f68160ff8516610cf8565b6040805180820190915260078152663b32b939b4b7b760c91b602082015261071f908290610cda565b6107298183610cf8565b6002602085015251516080909301929092525050565b80516000036107615760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b805160000361078b5760405163fe936cb760e01b815260040160405180910390fd5b60c090910152565b606060006107a2610100610cb9565b90506107db6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082610cda90919063ffffffff16565b82516107f99060028111156107f2576107f26117b0565b8290610d04565b6040805180820190915260088152676c616e677561676560c01b6020820152610823908290610cda565b604083015161083a9080156107f2576107f26117b0565b604080518082019091526006815265736f7572636560d01b6020820152610862908290610cda565b6060830151610872908290610cda565b60a08301515115610906576040805180820190915260048152636172677360e01b60208201526108a3908290610cda565b6108ac81610d3d565b60005b8360a00151518110156108fc576108ec8460a0015182815181106108d5576108d56117c6565b602002602001015183610cda90919063ffffffff16565b6108f5816117f2565b90506108af565b5061090681610d61565b608083015151156109ca57600083602001516002811115610929576109296117b0565b036109475760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152610978908290610cda565b610991836020015160028111156107f2576107f26117b0565b6040805180820190915260078152667365637265747360c81b60208201526109ba908290610cda565b60808301516109ca908290610d7f565b60c08301515115610a635760408051808201909152600981526862797465734172677360b81b6020820152610a00908290610cda565b610a0981610d3d565b60005b8360c0015151811015610a5957610a498460c001518281518110610a3257610a326117c6565b602002602001015183610d7f90919063ffffffff16565b610a52816117f2565b9050610a0c565b50610a6381610d61565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401610ac395949392919061180b565b6020604051808303816000875af1158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b069190611854565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b6000546001600160a01b03163314610b905760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016104e1565b565b336001600160a01b03821603610bea5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016104e1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b8051600003610c5d576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115610c7057610c706117b0565b90816002811115610c8357610c836117b0565b90525060408401828015610c9957610c996117b0565b90818015610ca957610ca96117b0565b9052506060909301929092525050565b610cc161113a565b8051610ccd9083610d8c565b5060006020820152919050565b610ce78260038351610e06565b8151610cf39082610f25565b505050565b61067482600083610e06565b8151610d119060c2610f4d565b506106748282604051602001610d2991815260200190565b604051602081830303815290604052610d7f565b610d48816004610fb6565b600181602001818151610d5b919061186d565b90525050565b610d6c816007610fb6565b600181602001818151610d5b9190611880565b610ce78260028351610e06565b604080518082019091526060815260006020820152610dac602083611893565b15610dd457610dbc602083611893565b610dc7906020611880565b610dd1908361186d565b91505b602080840183905260405180855260008152908184010181811015610df857600080fd5b604052508290505b92915050565b6017816001600160401b031611610e32578251610e2c9060e0600585901b168317610f4d565b50505050565b60ff816001600160401b031611610e72578251610e5a906018611fe0600586901b1617610f4d565b508251610e2c906001600160401b0383166001610fcd565b61ffff816001600160401b031611610eb3578251610e9b906019611fe0600586901b1617610f4d565b508251610e2c906001600160401b0383166002610fcd565b63ffffffff816001600160401b031611610ef6578251610ede90601a611fe0600586901b1617610f4d565b508251610e2c906001600160401b0383166004610fcd565b8251610f0d90601b611fe0600586901b1617610f4d565b508251610e2c906001600160401b0383166008610fcd565b604080518082019091526060815260006020820152610f4683838451611052565b9392505050565b6040805180820190915260608152600060208201528251516000610f7282600161186d565b905084602001518210610f9357610f9385610f8e8360026118b5565b611123565b8451602083820101858153508051821115610fac578181525b5093949350505050565b8151610cf390601f611fe0600585901b1617610f4d565b6040805180820190915260608152600060208201528351516000610ff1828561186d565b9050856020015181111561100e5761100e86610f8e8360026118b5565b6000600161101e866101006119b0565b6110289190611880565b90508651828101878319825116178152508051831115611046578281525b50959695505050505050565b604080518082019091526060815260006020820152825182111561107557600080fd5b8351516000611084848361186d565b905085602001518111156110a1576110a186610f8e8360026118b5565b8551805183820160200191600091808511156110bb578482525b505050602086015b602086106110fb57805182526110da60208361186d565b91506110e760208261186d565b90506110f4602087611880565b95506110c3565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b815161112f8383610d8c565b50610e2c8382610f25565b6040518060400160405280611162604051806040016040528060608152602001600081525090565b8152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156111ad576111ad61116f565b604052919050565b60006001600160401b038311156111ce576111ce61116f565b6111e1601f8401601f1916602001611185565b90508281528383830111156111f557600080fd5b828260208301376000602084830101529392505050565b600082601f83011261121d57600080fd5b610f46838335602085016111b5565b60008060006060848603121561124157600080fd5b8335925060208401356001600160401b038082111561125f57600080fd5b61126b8783880161120c565b9350604086013591508082111561128157600080fd5b5061128e8682870161120c565b9150509250925092565b6000815180845260005b818110156112be576020818501810151868301820152016112a2565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610f466020830184611298565b803560ff8116811461130257600080fd5b919050565b80356001600160401b038116811461130257600080fd5b60006001600160401b038211156113375761133761116f565b5060051b60200190565b600082601f83011261135257600080fd5b813560206113676113628361131e565b611185565b82815260059290921b8401810191818101908684111561138657600080fd5b8286015b848110156113da5780356001600160401b038111156113a95760008081fd5b8701603f810189136113bb5760008081fd5b6113cc8986830135604084016111b5565b84525091830191830161138a565b509695505050505050565b600082601f8301126113f657600080fd5b813560206114066113628361131e565b82815260059290921b8401810191818101908684111561142557600080fd5b8286015b848110156113da5780356001600160401b038111156114485760008081fd5b6114568986838b010161120c565b845250918301918301611429565b803563ffffffff8116811461130257600080fd5b600080600080600080600080610100898b03121561149557600080fd5b88356001600160401b03808211156114ac57600080fd5b6114b88c838d0161120c565b99506114c660208c016112f1565b98506114d460408c01611307565b975060608b01359150808211156114ea57600080fd5b6114f68c838d01611341565b965060808b013591508082111561150c57600080fd5b506115198b828c016113e5565b94505061152860a08a01611307565b925061153660c08a01611464565b915060e089013590509295985092959890939650565b6000806000806080858703121561156257600080fd5b84356001600160401b0381111561157857600080fd5b6115848782880161120c565b94505061159360208601611307565b92506115a160408601611464565b9396929550929360600135925050565b600080604083850312156115c457600080fd5b50508035926020909101359150565b6000602082840312156115e557600080fd5b81356001600160a01b0381168114610f4657600080fd5b600181811c9082168061161057607f821691505b60208210810361163057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610cf357600081815260208120601f850160051c8101602086101561165d5750805b601f850160051c820191505b8181101561167c57828155600101611669565b505050505050565b81516001600160401b0381111561169d5761169d61116f565b6116b1816116ab84546115fc565b84611636565b602080601f8311600181146116e657600084156116ce5750858301515b600019600386901b1c1916600185901b17855561167c565b600085815260208120601f198616915b82811015611715578886015182559484019460019091019084016116f6565b50858210156117335787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008060006060848603121561175857600080fd5b8351801515811461176857600080fd5b602085015160409095015190969495509392505050565b84151581528360208201528260408201526080606082015260006117a66080830184611298565b9695505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611804576118046117dc565b5060010190565b6001600160401b038616815260a06020820152600061182d60a0830187611298565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b60006020828403121561186657600080fd5b5051919050565b80820180821115610e0057610e006117dc565b81810381811115610e0057610e006117dc565b6000826118b057634e487b7160e01b600052601260045260246000fd5b500690565b8082028115828204841417610e0057610e006117dc565b600181815b808511156119075781600019048211156118ed576118ed6117dc565b808516156118fa57918102915b93841c93908002906118d1565b509250929050565b60008261191e57506001610e00565b8161192b57506000610e00565b8160018114611941576002811461194b57611967565b6001915050610e00565b60ff84111561195c5761195c6117dc565b50506001821b610e00565b5060208310610133831016604e8410600b841016171561198a575081810a610e00565b61199483836118cc565b80600019048211156119a8576119a86117dc565b029392505050565b6000610f46838361190f56fea26469706673582212206a978f485f07f889d959a98802a5ea2e54b1590333dbdbcf1ae807bab823af7664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 816,
        "contract": "contracts/ETHOracle.sol:ETHOracle",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 818,
        "contract": "contracts/ETHOracle.sol:ETHOracle",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2284,
        "contract": "contracts/ETHOracle.sol:ETHOracle",
        "label": "source",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2286,
        "contract": "contracts/ETHOracle.sol:ETHOracle",
        "label": "s_lastRequestId",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 2288,
        "contract": "contracts/ETHOracle.sol:ETHOracle",
        "label": "s_lastResponse",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2290,
        "contract": "contracts/ETHOracle.sol:ETHOracle",
        "label": "s_lastError",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2302,
        "contract": "contracts/ETHOracle.sol:ETHOracle",
        "label": "priceIncreasedBetweenTimestamps",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PriceData)2295_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(PriceData)2295_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct ETHOracle.PriceData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(PriceData)2295_storage)"
      },
      "t_mapping(t_uint256,t_struct(PriceData)2295_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ETHOracle.PriceData)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceData)2295_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PriceData)2295_storage": {
        "encoding": "inplace",
        "label": "struct ETHOracle.PriceData",
        "members": [
          {
            "astId": 2292,
            "contract": "contracts/ETHOracle.sol:ETHOracle",
            "label": "priceIncreased",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2294,
            "contract": "contracts/ETHOracle.sol:ETHOracle",
            "label": "isSet",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}